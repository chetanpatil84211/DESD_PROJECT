
project_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004628  08004628  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004630  08004630  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000380  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b943  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b51  00000000  00000000  0002ba12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a78  00000000  00000000  0002d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000831  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022055  00000000  00000000  0002e811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d675  00000000  00000000  00050866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1fe6  00000000  00000000  0005dedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003104  00000000  00000000  0012fec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00132fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004568 	.word	0x08004568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004568 	.word	0x08004568

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f023 030f 	bic.w	r3, r3, #15
 8000592:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	b2db      	uxtb	r3, r3
 800059c:	723b      	strb	r3, [r7, #8]
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	727b      	strb	r3, [r7, #9]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <lcd16x2_i2c_sendCommand+0x60>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <lcd16x2_i2c_sendCommand+0x64>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b299      	uxth	r1, r3
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	23c8      	movs	r3, #200	; 0xc8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	f001 fe5e 	bl	8002290 <HAL_I2C_Master_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000078 	.word	0x20000078
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	f043 030d 	orr.w	r3, r3, #13
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f043 0309 	orr.w	r3, r3, #9
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <lcd16x2_i2c_sendData+0x60>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <lcd16x2_i2c_sendData+0x64>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b299      	uxth	r1, r3
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	f001 fe2a 	bl	8002290 <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000078 	.word	0x20000078
 8000648:	2000007c 	.word	0x2000007c

0800064c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f000 fe31 	bl	80012bc <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <lcd16x2_i2c_init+0xd0>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000668:	2205      	movs	r2, #5
 800066a:	214e      	movs	r1, #78	; 0x4e
 800066c:	f001 ff0e 	bl	800248c <HAL_I2C_IsDeviceReady>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d010      	beq.n	8000698 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800067e:	2205      	movs	r2, #5
 8000680:	217e      	movs	r1, #126	; 0x7e
 8000682:	f001 ff03 	bl	800248c <HAL_I2C_IsDeviceReady>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <lcd16x2_i2c_init+0x44>
    {
      return false;
 800068c:	2300      	movs	r3, #0
 800068e:	e040      	b.n	8000712 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 8000692:	227e      	movs	r2, #126	; 0x7e
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e002      	b.n	800069e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 800069a:	224e      	movs	r2, #78	; 0x4e
 800069c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 800069e:	202d      	movs	r0, #45	; 0x2d
 80006a0:	f000 fe0c 	bl	80012bc <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006a4:	2030      	movs	r0, #48	; 0x30
 80006a6:	f7ff ff69 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f000 fe06 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff63 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fe00 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006bc:	2030      	movs	r0, #48	; 0x30
 80006be:	f7ff ff5d 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c2:	2008      	movs	r0, #8
 80006c4:	f000 fdfa 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006c8:	2020      	movs	r0, #32
 80006ca:	f7ff ff57 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006ce:	2008      	movs	r0, #8
 80006d0:	f000 fdf4 	bl	80012bc <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f7ff ff51 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fdee 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff4b 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fde8 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff45 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 fde2 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006f8:	2006      	movs	r0, #6
 80006fa:	f7ff ff3f 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fddc 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000704:	200c      	movs	r0, #12
 8000706:	f7ff ff39 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 fdd6 	bl	80012bc <HAL_Delay>

  return true;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078
 8000720:	2000007c 	.word	0x2000007c

08000724 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000748:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff15 	bl	800057c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000752:	e007      	b.n	8000764 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800075a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0c 	bl	800057c <lcd16x2_i2c_sendCommand>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff03 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000776:	2003      	movs	r0, #3
 8000778:	f000 fda0 	bl	80012bc <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000780:	b40f      	push	{r0, r1, r2, r3}
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	b089      	sub	sp, #36	; 0x24
 8000786:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800078c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fa40 	bl	8003c1c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	e00a      	b.n	80007b8 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80007a2:	7ffb      	ldrb	r3, [r7, #31]
 80007a4:	3320      	adds	r3, #32
 80007a6:	443b      	add	r3, r7
 80007a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff19 	bl	80005e4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007b2:	7ffb      	ldrb	r3, [r7, #31]
 80007b4:	3301      	adds	r3, #1
 80007b6:	77fb      	strb	r3, [r7, #31]
 80007b8:	7ffc      	ldrb	r4, [r7, #31]
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	429c      	cmp	r4, r3
 80007c8:	d202      	bcs.n	80007d0 <lcd16x2_i2c_printf+0x50>
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d9e8      	bls.n	80007a2 <lcd16x2_i2c_printf+0x22>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3724      	adds	r7, #36	; 0x24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007da:	b004      	add	sp, #16
 80007dc:	4770      	bx	lr
	...

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fcf8 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f8ea 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 faa0 	bl	8000d30 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007f0:	f000 fa46 	bl	8000c80 <MX_I2C1_Init>
  MX_ADC1_Init();
 80007f4:	f000 f94e 	bl	8000a94 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007f8:	f000 f99e 	bl	8000b38 <MX_ADC2_Init>
  MX_ADC3_Init();
 80007fc:	f000 f9ee 	bl	8000bdc <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000800:	f000 fa6c 	bl	8000cdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1));
 8000804:	485d      	ldr	r0, [pc, #372]	; (800097c <main+0x19c>)
 8000806:	f7ff ff21 	bl	800064c <lcd16x2_i2c_init>
  HAL_Delay(300);
 800080a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800080e:	f000 fd55 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_setCursor(0, 2);
 8000812:	2102      	movs	r1, #2
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff85 	bl	8000724 <lcd16x2_i2c_setCursor>
  lcd16x2_i2c_printf(" Air Quality ");
 800081a:	4859      	ldr	r0, [pc, #356]	; (8000980 <main+0x1a0>)
 800081c:	f7ff ffb0 	bl	8000780 <lcd16x2_i2c_printf>
  lcd16x2_i2c_setCursor(1, 0);
 8000820:	2100      	movs	r1, #0
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff ff7e 	bl	8000724 <lcd16x2_i2c_setCursor>
  lcd16x2_i2c_printf("Moniter System");
 8000828:	4856      	ldr	r0, [pc, #344]	; (8000984 <main+0x1a4>)
 800082a:	f7ff ffa9 	bl	8000780 <lcd16x2_i2c_printf>
  HAL_Delay(4000);
 800082e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000832:	f000 fd43 	bl	80012bc <HAL_Delay>
  lcd16x2_i2c_clear();
 8000836:	f7ff ff99 	bl	800076c <lcd16x2_i2c_clear>
  lcd16x2_i2c_setCursor(0, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff71 	bl	8000724 <lcd16x2_i2c_setCursor>
  lcd16x2_i2c_printf("MQ-2 MQ-7 MQ-135");
 8000842:	4851      	ldr	r0, [pc, #324]	; (8000988 <main+0x1a8>)
 8000844:	f7ff ff9c 	bl	8000780 <lcd16x2_i2c_printf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
				HAL_ADC_Start(&hadc1);
 8000848:	4850      	ldr	r0, [pc, #320]	; (800098c <main+0x1ac>)
 800084a:	f000 fd9f 	bl	800138c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800084e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000852:	484e      	ldr	r0, [pc, #312]	; (800098c <main+0x1ac>)
 8000854:	f000 fe9f 	bl	8001596 <HAL_ADC_PollForConversion>
				value=HAL_ADC_GetValue(&hadc1);
 8000858:	484c      	ldr	r0, [pc, #304]	; (800098c <main+0x1ac>)
 800085a:	f000 ff27 	bl	80016ac <HAL_ADC_GetValue>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <main+0x1b0>)
 8000864:	601a      	str	r2, [r3, #0]
				HAL_ADC_Stop(&hadc1);
 8000866:	4849      	ldr	r0, [pc, #292]	; (800098c <main+0x1ac>)
 8000868:	f000 fe62 	bl	8001530 <HAL_ADC_Stop>
				//value= value* (5.0 / 1023.0);
				//value = value *9.8;
				sprintf(str1,"%d",value);
 800086c:	4b48      	ldr	r3, [pc, #288]	; (8000990 <main+0x1b0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4948      	ldr	r1, [pc, #288]	; (8000994 <main+0x1b4>)
 8000874:	4848      	ldr	r0, [pc, #288]	; (8000998 <main+0x1b8>)
 8000876:	f003 f99b 	bl	8003bb0 <siprintf>
				lcd16x2_i2c_setCursor(1, 0);
 800087a:	2100      	movs	r1, #0
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff51 	bl	8000724 <lcd16x2_i2c_setCursor>
				lcd16x2_i2c_printf(str1);
 8000882:	4845      	ldr	r0, [pc, #276]	; (8000998 <main+0x1b8>)
 8000884:	f7ff ff7c 	bl	8000780 <lcd16x2_i2c_printf>
				HAL_Delay(500);
 8000888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088c:	f000 fd16 	bl	80012bc <HAL_Delay>
				sprintf(str1,"field1=%d&",value);
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <main+0x1b0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4941      	ldr	r1, [pc, #260]	; (800099c <main+0x1bc>)
 8000898:	483f      	ldr	r0, [pc, #252]	; (8000998 <main+0x1b8>)
 800089a:	f003 f989 	bl	8003bb0 <siprintf>


					//
				//HAL_UART_Transmit(&huart2, str, sizeof(str), HAL_MAX_DELAY);
				HAL_ADC_Stop(&hadc1);
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <main+0x1ac>)
 80008a0:	f000 fe46 	bl	8001530 <HAL_ADC_Stop>

				//HAL_Delay(1000);

				HAL_ADC_Start(&hadc2);
 80008a4:	483e      	ldr	r0, [pc, #248]	; (80009a0 <main+0x1c0>)
 80008a6:	f000 fd71 	bl	800138c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80008aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ae:	483c      	ldr	r0, [pc, #240]	; (80009a0 <main+0x1c0>)
 80008b0:	f000 fe71 	bl	8001596 <HAL_ADC_PollForConversion>
				value=HAL_ADC_GetValue(&hadc2);
 80008b4:	483a      	ldr	r0, [pc, #232]	; (80009a0 <main+0x1c0>)
 80008b6:	f000 fef9 	bl	80016ac <HAL_ADC_GetValue>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <main+0x1b0>)
 80008c0:	601a      	str	r2, [r3, #0]
				HAL_ADC_Stop(&hadc1);
 80008c2:	4832      	ldr	r0, [pc, #200]	; (800098c <main+0x1ac>)
 80008c4:	f000 fe34 	bl	8001530 <HAL_ADC_Stop>
				//value= value* (5.0 / 1023.0);
				//value = value * 9.8;
				sprintf(str2,"%d",value);
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <main+0x1b0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4931      	ldr	r1, [pc, #196]	; (8000994 <main+0x1b4>)
 80008d0:	4834      	ldr	r0, [pc, #208]	; (80009a4 <main+0x1c4>)
 80008d2:	f003 f96d 	bl	8003bb0 <siprintf>
				lcd16x2_i2c_setCursor(1, 5);
 80008d6:	2105      	movs	r1, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff23 	bl	8000724 <lcd16x2_i2c_setCursor>
				lcd16x2_i2c_printf(str2);
 80008de:	4831      	ldr	r0, [pc, #196]	; (80009a4 <main+0x1c4>)
 80008e0:	f7ff ff4e 	bl	8000780 <lcd16x2_i2c_printf>
				sprintf(str2,"field2=%d&",value);
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <main+0x1b0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	492f      	ldr	r1, [pc, #188]	; (80009a8 <main+0x1c8>)
 80008ec:	482d      	ldr	r0, [pc, #180]	; (80009a4 <main+0x1c4>)
 80008ee:	f003 f95f 	bl	8003bb0 <siprintf>
				//HAL_UART_Transmit(&huart2, str2, sizeof(str), HAL_MAX_DELAY);
				HAL_ADC_Stop(&hadc2);
 80008f2:	482b      	ldr	r0, [pc, #172]	; (80009a0 <main+0x1c0>)
 80008f4:	f000 fe1c 	bl	8001530 <HAL_ADC_Stop>

				//HAL_Delay(1000);

				HAL_ADC_Start(&hadc3);
 80008f8:	482c      	ldr	r0, [pc, #176]	; (80009ac <main+0x1cc>)
 80008fa:	f000 fd47 	bl	800138c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80008fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000902:	482a      	ldr	r0, [pc, #168]	; (80009ac <main+0x1cc>)
 8000904:	f000 fe47 	bl	8001596 <HAL_ADC_PollForConversion>
				value=HAL_ADC_GetValue(&hadc3);
 8000908:	4828      	ldr	r0, [pc, #160]	; (80009ac <main+0x1cc>)
 800090a:	f000 fecf 	bl	80016ac <HAL_ADC_GetValue>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <main+0x1b0>)
 8000914:	601a      	str	r2, [r3, #0]
				HAL_ADC_Stop(&hadc1);
 8000916:	481d      	ldr	r0, [pc, #116]	; (800098c <main+0x1ac>)
 8000918:	f000 fe0a 	bl	8001530 <HAL_ADC_Stop>
				//value= value* (5.0 / 1023.0);
				//value = value * 9.8;
				sprintf(str3,"%d",value);
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <main+0x1b0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	491c      	ldr	r1, [pc, #112]	; (8000994 <main+0x1b4>)
 8000924:	4822      	ldr	r0, [pc, #136]	; (80009b0 <main+0x1d0>)
 8000926:	f003 f943 	bl	8003bb0 <siprintf>
				lcd16x2_i2c_setCursor(1, 11);
 800092a:	210b      	movs	r1, #11
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fef9 	bl	8000724 <lcd16x2_i2c_setCursor>
				lcd16x2_i2c_printf(str3);
 8000932:	481f      	ldr	r0, [pc, #124]	; (80009b0 <main+0x1d0>)
 8000934:	f7ff ff24 	bl	8000780 <lcd16x2_i2c_printf>
				sprintf(str3,"field3=%d\r\n",value);
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <main+0x1b0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	491d      	ldr	r1, [pc, #116]	; (80009b4 <main+0x1d4>)
 8000940:	481b      	ldr	r0, [pc, #108]	; (80009b0 <main+0x1d0>)
 8000942:	f003 f935 	bl	8003bb0 <siprintf>
				//HAL_UART_Transmit(&huart2, str, sizeof(str), HAL_MAX_DELAY);
				HAL_ADC_Stop(&hadc3);
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <main+0x1cc>)
 8000948:	f000 fdf2 	bl	8001530 <HAL_ADC_Stop>
				strcpy(str,str1);
 800094c:	4912      	ldr	r1, [pc, #72]	; (8000998 <main+0x1b8>)
 800094e:	481a      	ldr	r0, [pc, #104]	; (80009b8 <main+0x1d8>)
 8000950:	f003 f9b2 	bl	8003cb8 <strcpy>
				strcat(str,str2);
 8000954:	4913      	ldr	r1, [pc, #76]	; (80009a4 <main+0x1c4>)
 8000956:	4818      	ldr	r0, [pc, #96]	; (80009b8 <main+0x1d8>)
 8000958:	f003 f972 	bl	8003c40 <strcat>
				strcat(str,str3);
 800095c:	4914      	ldr	r1, [pc, #80]	; (80009b0 <main+0x1d0>)
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <main+0x1d8>)
 8000960:	f003 f96e 	bl	8003c40 <strcat>
				HAL_UART_Transmit(&huart2, (uint8_t *)str, sizeof(str), HAL_MAX_DELAY);
 8000964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000968:	2254      	movs	r2, #84	; 0x54
 800096a:	4913      	ldr	r1, [pc, #76]	; (80009b8 <main+0x1d8>)
 800096c:	4813      	ldr	r0, [pc, #76]	; (80009bc <main+0x1dc>)
 800096e:	f002 fdaa 	bl	80034c6 <HAL_UART_Transmit>
				HAL_Delay(15000);
 8000972:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000976:	f000 fca1 	bl	80012bc <HAL_Delay>
				HAL_ADC_Start(&hadc1);
 800097a:	e765      	b.n	8000848 <main+0x68>
 800097c:	20000158 	.word	0x20000158
 8000980:	08004580 	.word	0x08004580
 8000984:	08004590 	.word	0x08004590
 8000988:	080045a0 	.word	0x080045a0
 800098c:	20000080 	.word	0x20000080
 8000990:	200001f0 	.word	0x200001f0
 8000994:	080045b4 	.word	0x080045b4
 8000998:	20000248 	.word	0x20000248
 800099c:	080045b8 	.word	0x080045b8
 80009a0:	200000c8 	.word	0x200000c8
 80009a4:	20000258 	.word	0x20000258
 80009a8:	080045c4 	.word	0x080045c4
 80009ac:	20000110 	.word	0x20000110
 80009b0:	20000268 	.word	0x20000268
 80009b4:	080045d0 	.word	0x080045d0
 80009b8:	200001f4 	.word	0x200001f4
 80009bc:	200001ac 	.word	0x200001ac

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f92e 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 f859 	bl	8002afc <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f9a4 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 faba 	bl	8002fec <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f98d 	bl	8000d9c <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <MX_ADC1_Init+0x9c>)
 8000aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000aae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_ADC1_Init+0xa0>)
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000af6:	f000 fc05 	bl	8001304 <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f000 f94c 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000b16:	f000 fdd7 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b20:	f000 f93c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000080 	.word	0x20000080
 8000b30:	40012000 	.word	0x40012000
 8000b34:	0f000001 	.word	0x0f000001

08000b38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <MX_ADC2_Init+0x9c>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b56:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_ADC2_Init+0xa0>)
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000b9a:	f000 fbb3 	bl	8001304 <HAL_ADC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000ba4:	f000 f8fa 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_ADC2_Init+0x98>)
 8000bba:	f000 fd85 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000bc4:	f000 f8ea 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000c8 	.word	0x200000c8
 8000bd4:	40012100 	.word	0x40012100
 8000bd8:	0f000001 	.word	0x0f000001

08000bdc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <MX_ADC3_Init+0x9c>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000bf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bfa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_ADC3_Init+0xa0>)
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c3e:	f000 fb61 	bl	8001304 <HAL_ADC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 f8a8 	bl	8000d9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_ADC3_Init+0x98>)
 8000c5e:	f000 fd33 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c68:	f000 f898 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000110 	.word	0x20000110
 8000c78:	40012200 	.word	0x40012200
 8000c7c:	0f000001 	.word	0x0f000001

08000c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <MX_I2C1_Init+0x54>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000c8c:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <MX_I2C1_Init+0x58>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ca2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_I2C1_Init+0x50>)
 8000cbe:	f001 f9a3 	bl	8002008 <HAL_I2C_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 f868 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000158 	.word	0x20000158
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_USART2_UART_Init+0x50>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f002 fb8a 	bl	800342c <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1e:	f000 f83d 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200001ac 	.word	0x200001ac
 8000d2c:	40004400 	.word	0x40004400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_GPIO_Init+0x68>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de6:	2007      	movs	r0, #7
 8000de8:	f000 ff3e 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <HAL_ADC_MspInit+0x134>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d128      	bne.n	8000e6c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a3c      	ldr	r2, [pc, #240]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4833      	ldr	r0, [pc, #204]	; (8000f34 <HAL_ADC_MspInit+0x13c>)
 8000e66:	f000 ff33 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e6a:	e05a      	b.n	8000f22 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_ADC_MspInit+0x140>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d128      	bne.n	8000ec8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481c      	ldr	r0, [pc, #112]	; (8000f34 <HAL_ADC_MspInit+0x13c>)
 8000ec2:	f000 ff05 	bl	8001cd0 <HAL_GPIO_Init>
}
 8000ec6:	e02c      	b.n	8000f22 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_ADC_MspInit+0x144>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d127      	bne.n	8000f22 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_ADC_MspInit+0x138>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_ADC_MspInit+0x13c>)
 8000f1e:	f000 fed7 	bl	8001cd0 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	3738      	adds	r7, #56	; 0x38
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40012100 	.word	0x40012100
 8000f3c:	40012200 	.word	0x40012200

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_I2C_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f7e:	23c0      	movs	r3, #192	; 0xc0
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f82:	2312      	movs	r3, #18
 8000f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <HAL_I2C_MspInit+0x8c>)
 8000f9a:	f000 fe99 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_I2C_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_UART_MspInit+0xc0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d149      	bne.n	8001086 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001046:	2308      	movs	r3, #8
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_UART_MspInit+0xc8>)
 8001062:	f000 fe35 	bl	8001cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001066:	2320      	movs	r3, #32
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <HAL_UART_MspInit+0xcc>)
 8001082:	f000 fe25 	bl	8001cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020c00 	.word	0x40020c00

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f8c6 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f002 fd9c 	bl	8003c60 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20020000 	.word	0x20020000
 8001154:	00000400 	.word	0x00000400
 8001158:	2000028c 	.word	0x2000028c
 800115c:	200003e0 	.word	0x200003e0

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd7 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f002 fd5b 	bl	8003c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fb13 	bl	80007e0 <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011c8:	08004638 	.word	0x08004638
  ldr r2, =_sbss
 80011cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011d0:	200003dc 	.word	0x200003dc

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 fd31 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fdcc 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fd3b 	bl	8001cb6 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001258:	f000 fd11 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	20000008 	.word	0x20000008
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000290 	.word	0x20000290

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000290 	.word	0x20000290

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e033      	b.n	8001382 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fd68 	bl	8000df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134a:	f023 0302 	bic.w	r3, r3, #2
 800134e:	f043 0202 	orr.w	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fad8 	bl	800190c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
 8001372:	e001      	b.n	8001378 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start+0x1a>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e0b2      	b.n	800150c <HAL_ADC_Start+0x180>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013cc:	4b52      	ldr	r3, [pc, #328]	; (8001518 <HAL_ADC_Start+0x18c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_ADC_Start+0x190>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d17a      	bne.n	80014f2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001426:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143a:	d106      	bne.n	800144a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f023 0206 	bic.w	r2, r3, #6
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
 8001448:	e002      	b.n	8001450 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_ADC_Start+0x194>)
 800145a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2b00      	cmp	r3, #0
 8001470:	d12a      	bne.n	80014c8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_ADC_Start+0x198>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d015      	beq.n	80014a8 <HAL_ADC_Start+0x11c>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_ADC_Start+0x19c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d105      	bne.n	8001492 <HAL_ADC_Start+0x106>
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_ADC_Start+0x194>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00a      	beq.n	80014a8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_ADC_Start+0x1a0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d136      	bne.n	800150a <HAL_ADC_Start+0x17e>
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_ADC_Start+0x194>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d130      	bne.n	800150a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d129      	bne.n	800150a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	e020      	b.n	800150a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_ADC_Start+0x198>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11b      	bne.n	800150a <HAL_ADC_Start+0x17e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d114      	bne.n	800150a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	e00b      	b.n	800150a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f043 0210 	orr.w	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	40012300 	.word	0x40012300
 8001524:	40012000 	.word	0x40012000
 8001528:	40012100 	.word	0x40012100
 800152c:	40012200 	.word	0x40012200

08001530 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Stop+0x16>
 8001542:	2302      	movs	r3, #2
 8001544:	e021      	b.n	800158a <HAL_ADC_Stop+0x5a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d113      	bne.n	80015dc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c2:	d10b      	bne.n	80015dc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e063      	b.n	80016a4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015dc:	f7ff fe62 	bl	80012a4 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015e2:	e021      	b.n	8001628 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015ea:	d01d      	beq.n	8001628 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_ADC_PollForConversion+0x6c>
 80015f2:	f7ff fe57 	bl	80012a4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d212      	bcs.n	8001628 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b02      	cmp	r3, #2
 800160e:	d00b      	beq.n	8001628 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0204 	orr.w	r2, r3, #4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e03d      	b.n	80016a4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d1d6      	bne.n	80015e4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f06f 0212 	mvn.w	r2, #18
 800163e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d123      	bne.n	80016a2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11f      	bne.n	80016a2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800167a:	2b00      	cmp	r3, #0
 800167c:	d111      	bne.n	80016a2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d105      	bne.n	80016a2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1c>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e105      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x228>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d925      	bls.n	8001740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68d9      	ldr	r1, [r3, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	3b1e      	subs	r3, #30
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43da      	mvns	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	4603      	mov	r3, r0
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4403      	add	r3, r0
 8001732:	3b1e      	subs	r3, #30
 8001734:	409a      	lsls	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e022      	b.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	4603      	mov	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b06      	cmp	r3, #6
 800178c:	d824      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b05      	subs	r3, #5
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e04c      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b23      	subs	r3, #35	; 0x23
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b23      	subs	r3, #35	; 0x23
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	e023      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b41      	subs	r3, #65	; 0x41
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b41      	subs	r3, #65	; 0x41
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_ADC_ConfigChannel+0x234>)
 8001874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d109      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d123      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x1e6>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d11b      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x23c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x240>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9a      	lsrs	r2, r3, #18
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	40012000 	.word	0x40012000
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <ADC_Init+0x1f0>)
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <ADC_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e00f      	b.n	8001a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0202 	bic.w	r2, r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e1b      	ldrb	r3, [r3, #24]
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	051a      	lsls	r2, r3, #20
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac2:	025a      	lsls	r2, r3, #9
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	029a      	lsls	r2, r3, #10
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40012300 	.word	0x40012300
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff47 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff5c 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffb0 	bl	8001c24 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e16b      	b.n	8001fc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 815a 	bne.w	8001fbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d005      	beq.n	8001d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d130      	bne.n	8001d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 0201 	and.w	r2, r3, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d017      	beq.n	8001dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80b4 	beq.w	8001fbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <HAL_GPIO_Init+0x30c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a5f      	ldr	r2, [pc, #380]	; (8001fdc <HAL_GPIO_Init+0x30c>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_GPIO_Init+0x30c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e72:	4a5b      	ldr	r2, [pc, #364]	; (8001fe0 <HAL_GPIO_Init+0x310>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <HAL_GPIO_Init+0x314>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02b      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_GPIO_Init+0x318>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a50      	ldr	r2, [pc, #320]	; (8001fec <HAL_GPIO_Init+0x31c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <HAL_GPIO_Init+0x320>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x21a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4e      	ldr	r2, [pc, #312]	; (8001ff4 <HAL_GPIO_Init+0x324>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x216>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_GPIO_Init+0x328>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x32c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <HAL_GPIO_Init+0x330>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x20a>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00e      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eda:	2308      	movs	r3, #8
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x228>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <HAL_GPIO_Init+0x310>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a27      	ldr	r2, [pc, #156]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_GPIO_Init+0x334>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f ae90 	bls.w	8001cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	40021800 	.word	0x40021800
 8002000:	40021c00 	.word	0x40021c00
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e12b      	b.n	8002272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe ff86 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800206a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800206c:	f001 f9b6 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8002070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a81      	ldr	r2, [pc, #516]	; (800227c <HAL_I2C_Init+0x274>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d807      	bhi.n	800208c <HAL_I2C_Init+0x84>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_I2C_Init+0x278>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e006      	b.n	800209a <HAL_I2C_Init+0x92>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a7d      	ldr	r2, [pc, #500]	; (8002284 <HAL_I2C_Init+0x27c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0e7      	b.n	8002272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_I2C_Init+0x280>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a6a      	ldr	r2, [pc, #424]	; (800227c <HAL_I2C_Init+0x274>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d802      	bhi.n	80020dc <HAL_I2C_Init+0xd4>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	e009      	b.n	80020f0 <HAL_I2C_Init+0xe8>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	4a69      	ldr	r2, [pc, #420]	; (800228c <HAL_I2C_Init+0x284>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	3301      	adds	r3, #1
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	495c      	ldr	r1, [pc, #368]	; (800227c <HAL_I2C_Init+0x274>)
 800210c:	428b      	cmp	r3, r1
 800210e:	d819      	bhi.n	8002144 <HAL_I2C_Init+0x13c>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e59      	subs	r1, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fbb1 f3f3 	udiv	r3, r1, r3
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002124:	400b      	ands	r3, r1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_I2C_Init+0x138>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e59      	subs	r1, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fbb1 f3f3 	udiv	r3, r1, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213e:	e051      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 8002140:	2304      	movs	r3, #4
 8002142:	e04f      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d111      	bne.n	8002170 <HAL_I2C_Init+0x168>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e012      	b.n	8002196 <HAL_I2C_Init+0x18e>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	0099      	lsls	r1, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x196>
 800219a:	2301      	movs	r3, #1
 800219c:	e022      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_I2C_Init+0x1bc>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1e58      	subs	r0, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	440b      	add	r3, r1
 80021b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c2:	e00f      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	6809      	ldr	r1, [r1, #0]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6911      	ldr	r1, [r2, #16]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	430b      	orrs	r3, r1
 8002226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	000186a0 	.word	0x000186a0
 8002280:	001e847f 	.word	0x001e847f
 8002284:	003d08ff 	.word	0x003d08ff
 8002288:	431bde83 	.word	0x431bde83
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	460b      	mov	r3, r1
 800229e:	817b      	strh	r3, [r7, #10]
 80022a0:	4613      	mov	r3, r2
 80022a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7fe fffe 	bl	80012a4 <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	f040 80e0 	bne.w	8002478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2319      	movs	r3, #25
 80022be:	2201      	movs	r2, #1
 80022c0:	4970      	ldr	r1, [pc, #448]	; (8002484 <HAL_I2C_Master_Transmit+0x1f4>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fa92 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0d3      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0x50>
 80022dc:	2302      	movs	r3, #2
 80022de:	e0cc      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d007      	beq.n	8002306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2221      	movs	r2, #33	; 0x21
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2210      	movs	r2, #16
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	893a      	ldrh	r2, [r7, #8]
 8002336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a50      	ldr	r2, [pc, #320]	; (8002488 <HAL_I2C_Master_Transmit+0x1f8>)
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002348:	8979      	ldrh	r1, [r7, #10]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f9ca 	bl	80026e8 <I2C_MasterRequestWrite>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e08d      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002374:	e066      	b.n	8002444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fb0c 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b04      	cmp	r3, #4
 800238c:	d107      	bne.n	800239e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06b      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11b      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x188>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fafc 	bl	8002a1a <I2C_WaitOnBTFFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e01a      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d194      	bne.n	8002376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	00100002 	.word	0x00100002
 8002488:	ffff0000 	.word	0xffff0000

0800248c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	460b      	mov	r3, r1
 800249a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7fe ff02 	bl	80012a4 <HAL_GetTick>
 80024a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 8111 	bne.w	80026d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4988      	ldr	r1, [pc, #544]	; (80026e0 <HAL_I2C_IsDeviceReady+0x254>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f994 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e104      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2C_IsDeviceReady+0x50>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0fd      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2224      	movs	r2, #36	; 0x24
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a70      	ldr	r2, [pc, #448]	; (80026e4 <HAL_I2C_IsDeviceReady+0x258>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002534:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f952 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255c:	d103      	bne.n	8002566 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0b6      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fe93 	bl	80012a4 <HAL_GetTick>
 800257e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025ae:	e025      	b.n	80025fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7fe fe78 	bl	80012a4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d302      	bcc.n	80025c6 <HAL_I2C_IsDeviceReady+0x13a>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	22a0      	movs	r2, #160	; 0xa0
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2ba0      	cmp	r3, #160	; 0xa0
 8002606:	d005      	beq.n	8002614 <HAL_I2C_IsDeviceReady+0x188>
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_I2C_IsDeviceReady+0x188>
 800260e:	7dbb      	ldrb	r3, [r7, #22]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0cd      	beq.n	80025b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d129      	bne.n	800267e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2319      	movs	r3, #25
 8002656:	2201      	movs	r2, #1
 8002658:	4921      	ldr	r1, [pc, #132]	; (80026e0 <HAL_I2C_IsDeviceReady+0x254>)
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f8c6 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e036      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e02c      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002696:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2319      	movs	r3, #25
 800269e:	2201      	movs	r2, #1
 80026a0:	490f      	ldr	r1, [pc, #60]	; (80026e0 <HAL_I2C_IsDeviceReady+0x254>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f8a2 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e012      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f4ff af32 	bcc.w	8002526 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d006      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d003      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002710:	d108      	bne.n	8002724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	2b12      	cmp	r3, #18
 800272a:	d107      	bne.n	800273c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f84f 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d103      	bne.n	800276c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e035      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002778:	d108      	bne.n	800278c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	e01b      	b.n	80027c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800278c:	897b      	ldrh	r3, [r7, #10]
 800278e:	11db      	asrs	r3, r3, #7
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0306 	and.w	r3, r3, #6
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f063 030f 	orn	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <I2C_MasterRequestWrite+0xfc>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f875 	bl	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e010      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <I2C_MasterRequestWrite+0x100>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f865 	bl	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00010008 	.word	0x00010008
 80027e8:	00010002 	.word	0x00010002

080027ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	e025      	b.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002804:	d021      	beq.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7fe fd4d 	bl	80012a4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e023      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10d      	bne.n	8002870 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf0c      	ite	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	2300      	movne	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	e00c      	b.n	800288a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d0b6      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a8:	e051      	b.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	d123      	bne.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e046      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002908:	d021      	beq.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe fccb 	bl	80012a4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e020      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e00b      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d18d      	bne.n	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	e02d      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f878 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e02d      	b.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029bc:	d021      	beq.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fc71 	bl	80012a4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e007      	b.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	d1ca      	bne.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a26:	e02d      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f837 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e02d      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a3e:	d021      	beq.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7fe fc30 	bl	80012a4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d1ca      	bne.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d11b      	bne.n	8002aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e267      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d075      	beq.n	8002c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d00c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d112      	bne.n	8002b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b32:	4b82      	ldr	r3, [pc, #520]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3e:	d10b      	bne.n	8002b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05b      	beq.n	8002c04 <HAL_RCC_OscConfig+0x108>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d157      	bne.n	8002c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e242      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x74>
 8002b62:	4b76      	ldr	r3, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a75      	ldr	r2, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e01d      	b.n	8002bac <HAL_RCC_OscConfig+0xb0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x98>
 8002b7a:	4b70      	ldr	r3, [pc, #448]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6f      	ldr	r2, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6c      	ldr	r2, [pc, #432]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0xb0>
 8002b94:	4b69      	ldr	r3, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fb76 	bl	80012a4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fb72 	bl	80012a4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e207      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0xc0>
 8002bda:	e014      	b.n	8002c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fb62 	bl	80012a4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fb5e 	bl	80012a4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1f3      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0xe8>
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d063      	beq.n	8002cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d11c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2a:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d116      	bne.n	8002c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_RCC_OscConfig+0x152>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e1c7      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4937      	ldr	r1, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	e03a      	b.n	8002cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fb17 	bl	80012a4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fb13 	bl	80012a4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1a8      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4925      	ldr	r1, [pc, #148]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
 8002cac:	e015      	b.n	8002cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe faf6 	bl	80012a4 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe faf2 	bl	80012a4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e187      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d036      	beq.n	8002d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x248>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fad6 	bl	80012a4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fad2 	bl	80012a4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e167      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x240>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x200>
 8002d1a:	e01b      	b.n	8002d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_OscConfig+0x248>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fabf 	bl	80012a4 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	e00e      	b.n	8002d48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fabb 	bl	80012a4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d907      	bls.n	8002d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e150      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470000 	.word	0x42470000
 8002d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ea      	bne.n	8002d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8097 	beq.w	8002e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a7c      	ldr	r2, [pc, #496]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	4b77      	ldr	r3, [pc, #476]	; (8002f70 <HAL_RCC_OscConfig+0x474>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9e:	4b74      	ldr	r3, [pc, #464]	; (8002f70 <HAL_RCC_OscConfig+0x474>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a73      	ldr	r2, [pc, #460]	; (8002f70 <HAL_RCC_OscConfig+0x474>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fa7b 	bl	80012a4 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe fa77 	bl	80012a4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e10c      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x474>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x2ea>
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x324>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x30c>
 8002dee:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a5e      	ldr	r2, [pc, #376]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a5b      	ldr	r2, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0x324>
 8002e08:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a57      	ldr	r2, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a54      	ldr	r2, [pc, #336]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7fe fa3c 	bl	80012a4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe fa38 	bl	80012a4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0cb      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ee      	beq.n	8002e30 <HAL_RCC_OscConfig+0x334>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e54:	f7fe fa26 	bl	80012a4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fa22 	bl	80012a4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0b5      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ee      	bne.n	8002e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	4a38      	ldr	r2, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a1 	beq.w	8002fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d05c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d141      	bne.n	8002f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x478>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f9f6 	bl	80012a4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe f9f2 	bl	80012a4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e087      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	491b      	ldr	r1, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x478>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f9cb 	bl	80012a4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe f9c7 	bl	80012a4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e05c      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x416>
 8002f30:	e054      	b.n	8002fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_RCC_OscConfig+0x478>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe f9b4 	bl	80012a4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe f9b0 	bl	80012a4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e045      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_OscConfig+0x470>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x444>
 8002f5e:	e03d      	b.n	8002fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e038      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40007000 	.word	0x40007000
 8002f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x4ec>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d028      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d121      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d11a      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0cc      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d90c      	bls.n	8003028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0b8      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a58      	ldr	r2, [pc, #352]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800304a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a52      	ldr	r2, [pc, #328]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	494d      	ldr	r1, [pc, #308]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d044      	beq.n	800310c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d119      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e07f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e067      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4934      	ldr	r1, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fe f8e2 	bl	80012a4 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe f8de 	bl	80012a4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e04f      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d20c      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e032      	b.n	800319a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4916      	ldr	r1, [pc, #88]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	490e      	ldr	r1, [pc, #56]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003172:	f000 f821 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003176:	4602      	mov	r2, r0
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	490a      	ldr	r1, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	5ccb      	ldrb	r3, [r1, r3]
 8003186:	fa22 f303 	lsr.w	r3, r2, r3
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe f842 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023c00 	.word	0x40023c00
 80031a8:	40023800 	.word	0x40023800
 80031ac:	080045dc 	.word	0x080045dc
 80031b0:	20000000 	.word	0x20000000
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031bc:	b094      	sub	sp, #80	; 0x50
 80031be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
 80031c4:	2300      	movs	r3, #0
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	2300      	movs	r3, #0
 80031ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d00d      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x40>
 80031dc:	2b08      	cmp	r3, #8
 80031de:	f200 80e1 	bhi.w	80033a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x34>
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ea:	e0db      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b73      	ldr	r3, [pc, #460]	; (80033bc <HAL_RCC_GetSysClockFreq+0x204>)
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031f0:	e0db      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f2:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f6:	e0d8      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003202:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
 8003218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
 8003222:	2300      	movs	r3, #0
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800322a:	4622      	mov	r2, r4
 800322c:	462b      	mov	r3, r5
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323c:	0150      	lsls	r0, r2, #5
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4621      	mov	r1, r4
 8003244:	1a51      	subs	r1, r2, r1
 8003246:	6139      	str	r1, [r7, #16]
 8003248:	4629      	mov	r1, r5
 800324a:	eb63 0301 	sbc.w	r3, r3, r1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800325c:	4659      	mov	r1, fp
 800325e:	018b      	lsls	r3, r1, #6
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003266:	4651      	mov	r1, sl
 8003268:	018a      	lsls	r2, r1, #6
 800326a:	4651      	mov	r1, sl
 800326c:	ebb2 0801 	subs.w	r8, r2, r1
 8003270:	4659      	mov	r1, fp
 8003272:	eb63 0901 	sbc.w	r9, r3, r1
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328a:	4690      	mov	r8, r2
 800328c:	4699      	mov	r9, r3
 800328e:	4623      	mov	r3, r4
 8003290:	eb18 0303 	adds.w	r3, r8, r3
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	462b      	mov	r3, r5
 8003298:	eb49 0303 	adc.w	r3, r9, r3
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032aa:	4629      	mov	r1, r5
 80032ac:	024b      	lsls	r3, r1, #9
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b4:	4621      	mov	r1, r4
 80032b6:	024a      	lsls	r2, r1, #9
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032be:	2200      	movs	r2, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c8:	f7fc ffda 	bl	8000280 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4613      	mov	r3, r2
 80032d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d4:	e058      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d6:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	4611      	mov	r1, r2
 80032e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f0:	4642      	mov	r2, r8
 80032f2:	464b      	mov	r3, r9
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	0159      	lsls	r1, r3, #5
 80032fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003302:	0150      	lsls	r0, r2, #5
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4641      	mov	r1, r8
 800330a:	ebb2 0a01 	subs.w	sl, r2, r1
 800330e:	4649      	mov	r1, r9
 8003310:	eb63 0b01 	sbc.w	fp, r3, r1
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003328:	ebb2 040a 	subs.w	r4, r2, sl
 800332c:	eb63 050b 	sbc.w	r5, r3, fp
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	00eb      	lsls	r3, r5, #3
 800333a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333e:	00e2      	lsls	r2, r4, #3
 8003340:	4614      	mov	r4, r2
 8003342:	461d      	mov	r5, r3
 8003344:	4643      	mov	r3, r8
 8003346:	18e3      	adds	r3, r4, r3
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	464b      	mov	r3, r9
 800334c:	eb45 0303 	adc.w	r3, r5, r3
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335e:	4629      	mov	r1, r5
 8003360:	028b      	lsls	r3, r1, #10
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003368:	4621      	mov	r1, r4
 800336a:	028a      	lsls	r2, r1, #10
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003372:	2200      	movs	r2, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	61fa      	str	r2, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	f7fc ff80 	bl	8000280 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800339a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetSysClockFreq+0x204>)
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3750      	adds	r7, #80	; 0x50
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0a9b      	lsrs	r3, r3, #10
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	080045ec 	.word	0x080045ec

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffdc 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0b5b      	lsrs	r3, r3, #13
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	080045ec 	.word	0x080045ec

0800342c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03f      	b.n	80034be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fdbc 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	; 0x24
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f929 	bl	80036c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b08a      	sub	sp, #40	; 0x28
 80034ca:	af02      	add	r7, sp, #8
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d17c      	bne.n	80035e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_UART_Transmit+0x2c>
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e075      	b.n	80035e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Transmit+0x3e>
 8003500:	2302      	movs	r3, #2
 8003502:	e06e      	b.n	80035e2 <HAL_UART_Transmit+0x11c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2221      	movs	r2, #33	; 0x21
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351a:	f7fd fec3 	bl	80012a4 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003534:	d108      	bne.n	8003548 <HAL_UART_Transmit+0x82>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e003      	b.n	8003550 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003558:	e02a      	b.n	80035b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f840 	bl	80035ea <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e036      	b.n	80035e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003588:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	3302      	adds	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e007      	b.n	80035a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1cf      	bne.n	800355a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f810 	bl	80035ea <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e006      	b.n	80035e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e000      	b.n	80035e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
  }
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b090      	sub	sp, #64	; 0x40
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	e050      	b.n	800369e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d04c      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <UART_WaitOnFlagUntilTimeout+0x30>
 800360a:	f7fd fe4b 	bl	80012a4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003616:	429a      	cmp	r2, r3
 8003618:	d241      	bcs.n	800369e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363a:	637a      	str	r2, [r7, #52]	; 0x34
 800363c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e5      	bne.n	800361a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	613b      	str	r3, [r7, #16]
   return(result);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366e:	623a      	str	r2, [r7, #32]
 8003670:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	69f9      	ldr	r1, [r7, #28]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	61bb      	str	r3, [r7, #24]
   return(result);
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d09f      	beq.n	80035fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3740      	adds	r7, #64	; 0x40
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b0c0      	sub	sp, #256	; 0x100
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	68d9      	ldr	r1, [r3, #12]
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	ea40 0301 	orr.w	r3, r0, r1
 80036f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	431a      	orrs	r2, r3
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	431a      	orrs	r2, r3
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003720:	f021 010c 	bic.w	r1, r1, #12
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800372e:	430b      	orrs	r3, r1
 8003730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	6999      	ldr	r1, [r3, #24]
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	ea40 0301 	orr.w	r3, r0, r1
 800374e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4b8f      	ldr	r3, [pc, #572]	; (8003994 <UART_SetConfig+0x2cc>)
 8003758:	429a      	cmp	r2, r3
 800375a:	d005      	beq.n	8003768 <UART_SetConfig+0xa0>
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b8d      	ldr	r3, [pc, #564]	; (8003998 <UART_SetConfig+0x2d0>)
 8003764:	429a      	cmp	r2, r3
 8003766:	d104      	bne.n	8003772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7ff fe4c 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 800376c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003770:	e003      	b.n	800377a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003772:	f7ff fe33 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8003776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003784:	f040 810c 	bne.w	80039a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378c:	2200      	movs	r2, #0
 800378e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	1891      	adds	r1, r2, r2
 80037a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80037a2:	415b      	adcs	r3, r3
 80037a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037aa:	4621      	mov	r1, r4
 80037ac:	eb12 0801 	adds.w	r8, r2, r1
 80037b0:	4629      	mov	r1, r5
 80037b2:	eb43 0901 	adc.w	r9, r3, r1
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ca:	4690      	mov	r8, r2
 80037cc:	4699      	mov	r9, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	eb18 0303 	adds.w	r3, r8, r3
 80037d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037d8:	462b      	mov	r3, r5
 80037da:	eb49 0303 	adc.w	r3, r9, r3
 80037de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037f6:	460b      	mov	r3, r1
 80037f8:	18db      	adds	r3, r3, r3
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
 80037fc:	4613      	mov	r3, r2
 80037fe:	eb42 0303 	adc.w	r3, r2, r3
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
 8003804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800380c:	f7fc fd38 	bl	8000280 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <UART_SetConfig+0x2d4>)
 8003816:	fba3 2302 	umull	r2, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	011c      	lsls	r4, r3, #4
 800381e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800382c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	1891      	adds	r1, r2, r2
 8003836:	64b9      	str	r1, [r7, #72]	; 0x48
 8003838:	415b      	adcs	r3, r3
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003840:	4641      	mov	r1, r8
 8003842:	eb12 0a01 	adds.w	sl, r2, r1
 8003846:	4649      	mov	r1, r9
 8003848:	eb43 0b01 	adc.w	fp, r3, r1
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800385c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003860:	4692      	mov	sl, r2
 8003862:	469b      	mov	fp, r3
 8003864:	4643      	mov	r3, r8
 8003866:	eb1a 0303 	adds.w	r3, sl, r3
 800386a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386e:	464b      	mov	r3, r9
 8003870:	eb4b 0303 	adc.w	r3, fp, r3
 8003874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800388c:	460b      	mov	r3, r1
 800388e:	18db      	adds	r3, r3, r3
 8003890:	643b      	str	r3, [r7, #64]	; 0x40
 8003892:	4613      	mov	r3, r2
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
 800389a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800389e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038a2:	f7fc fced 	bl	8000280 <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	4b3b      	ldr	r3, [pc, #236]	; (800399c <UART_SetConfig+0x2d4>)
 80038ae:	fba3 2301 	umull	r2, r3, r3, r1
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2264      	movs	r2, #100	; 0x64
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	1acb      	subs	r3, r1, r3
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <UART_SetConfig+0x2d4>)
 80038c4:	fba3 2302 	umull	r2, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d0:	441c      	add	r4, r3
 80038d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	1891      	adds	r1, r2, r2
 80038ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80038ec:	415b      	adcs	r3, r3
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038f4:	4641      	mov	r1, r8
 80038f6:	1851      	adds	r1, r2, r1
 80038f8:	6339      	str	r1, [r7, #48]	; 0x30
 80038fa:	4649      	mov	r1, r9
 80038fc:	414b      	adcs	r3, r1
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800390c:	4659      	mov	r1, fp
 800390e:	00cb      	lsls	r3, r1, #3
 8003910:	4651      	mov	r1, sl
 8003912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003916:	4651      	mov	r1, sl
 8003918:	00ca      	lsls	r2, r1, #3
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	4603      	mov	r3, r0
 8003920:	4642      	mov	r2, r8
 8003922:	189b      	adds	r3, r3, r2
 8003924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003928:	464b      	mov	r3, r9
 800392a:	460a      	mov	r2, r1
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003948:	460b      	mov	r3, r1
 800394a:	18db      	adds	r3, r3, r3
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	4613      	mov	r3, r2
 8003950:	eb42 0303 	adc.w	r3, r2, r3
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800395a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800395e:	f7fc fc8f 	bl	8000280 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <UART_SetConfig+0x2d4>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2164      	movs	r1, #100	; 0x64
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <UART_SetConfig+0x2d4>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	f003 0207 	and.w	r2, r3, #7
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4422      	add	r2, r4
 800398e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003990:	e106      	b.n	8003ba0 <UART_SetConfig+0x4d8>
 8003992:	bf00      	nop
 8003994:	40011000 	.word	0x40011000
 8003998:	40011400 	.word	0x40011400
 800399c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039b2:	4642      	mov	r2, r8
 80039b4:	464b      	mov	r3, r9
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	6239      	str	r1, [r7, #32]
 80039ba:	415b      	adcs	r3, r3
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039c2:	4641      	mov	r1, r8
 80039c4:	1854      	adds	r4, r2, r1
 80039c6:	4649      	mov	r1, r9
 80039c8:	eb43 0501 	adc.w	r5, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	00eb      	lsls	r3, r5, #3
 80039d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039da:	00e2      	lsls	r2, r4, #3
 80039dc:	4614      	mov	r4, r2
 80039de:	461d      	mov	r5, r3
 80039e0:	4643      	mov	r3, r8
 80039e2:	18e3      	adds	r3, r4, r3
 80039e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039e8:	464b      	mov	r3, r9
 80039ea:	eb45 0303 	adc.w	r3, r5, r3
 80039ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a0e:	4629      	mov	r1, r5
 8003a10:	008b      	lsls	r3, r1, #2
 8003a12:	4621      	mov	r1, r4
 8003a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a18:	4621      	mov	r1, r4
 8003a1a:	008a      	lsls	r2, r1, #2
 8003a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a20:	f7fc fc2e 	bl	8000280 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4b60      	ldr	r3, [pc, #384]	; (8003bac <UART_SetConfig+0x4e4>)
 8003a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	011c      	lsls	r4, r3, #4
 8003a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	61b9      	str	r1, [r7, #24]
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a54:	4641      	mov	r1, r8
 8003a56:	1851      	adds	r1, r2, r1
 8003a58:	6139      	str	r1, [r7, #16]
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4651      	mov	r1, sl
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4642      	mov	r2, r8
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a88:	464b      	mov	r3, r9
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003aac:	4649      	mov	r1, r9
 8003aae:	008b      	lsls	r3, r1, #2
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	008a      	lsls	r2, r1, #2
 8003aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003abe:	f7fc fbdf 	bl	8000280 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4b38      	ldr	r3, [pc, #224]	; (8003bac <UART_SetConfig+0x4e4>)
 8003aca:	fba3 2301 	umull	r2, r3, r3, r1
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2264      	movs	r2, #100	; 0x64
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	1acb      	subs	r3, r1, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a33      	ldr	r2, [pc, #204]	; (8003bac <UART_SetConfig+0x4e4>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	441c      	add	r4, r3
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	673b      	str	r3, [r7, #112]	; 0x70
 8003af2:	677a      	str	r2, [r7, #116]	; 0x74
 8003af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	1891      	adds	r1, r2, r2
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	415b      	adcs	r3, r3
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b08:	4641      	mov	r1, r8
 8003b0a:	1851      	adds	r1, r2, r1
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	4649      	mov	r1, r9
 8003b10:	414b      	adcs	r3, r1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b20:	4659      	mov	r1, fp
 8003b22:	00cb      	lsls	r3, r1, #3
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	00ca      	lsls	r2, r1, #3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4642      	mov	r2, r8
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	eb42 0303 	adc.w	r3, r2, r3
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b4e:	667a      	str	r2, [r7, #100]	; 0x64
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	008b      	lsls	r3, r1, #2
 8003b60:	4641      	mov	r1, r8
 8003b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b66:	4641      	mov	r1, r8
 8003b68:	008a      	lsls	r2, r1, #2
 8003b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b6e:	f7fc fb87 	bl	8000280 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <UART_SetConfig+0x4e4>)
 8003b78:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2164      	movs	r1, #100	; 0x64
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a08      	ldr	r2, [pc, #32]	; (8003bac <UART_SetConfig+0x4e4>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 020f 	and.w	r2, r3, #15
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4422      	add	r2, r4
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bac:	51eb851f 	.word	0x51eb851f

08003bb0 <siprintf>:
 8003bb0:	b40e      	push	{r1, r2, r3}
 8003bb2:	b500      	push	{lr}
 8003bb4:	b09c      	sub	sp, #112	; 0x70
 8003bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bb8:	9002      	str	r0, [sp, #8]
 8003bba:	9006      	str	r0, [sp, #24]
 8003bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc0:	4809      	ldr	r0, [pc, #36]	; (8003be8 <siprintf+0x38>)
 8003bc2:	9107      	str	r1, [sp, #28]
 8003bc4:	9104      	str	r1, [sp, #16]
 8003bc6:	4909      	ldr	r1, [pc, #36]	; (8003bec <siprintf+0x3c>)
 8003bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bcc:	9105      	str	r1, [sp, #20]
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	a902      	add	r1, sp, #8
 8003bd4:	f000 f9ca 	bl	8003f6c <_svfiprintf_r>
 8003bd8:	9b02      	ldr	r3, [sp, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	b01c      	add	sp, #112	; 0x70
 8003be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be4:	b003      	add	sp, #12
 8003be6:	4770      	bx	lr
 8003be8:	20000058 	.word	0x20000058
 8003bec:	ffff0208 	.word	0xffff0208

08003bf0 <_vsiprintf_r>:
 8003bf0:	b500      	push	{lr}
 8003bf2:	b09b      	sub	sp, #108	; 0x6c
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	9104      	str	r1, [sp, #16]
 8003bf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	9102      	str	r1, [sp, #8]
 8003c00:	4905      	ldr	r1, [pc, #20]	; (8003c18 <_vsiprintf_r+0x28>)
 8003c02:	9103      	str	r1, [sp, #12]
 8003c04:	4669      	mov	r1, sp
 8003c06:	f000 f9b1 	bl	8003f6c <_svfiprintf_r>
 8003c0a:	9b00      	ldr	r3, [sp, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	b01b      	add	sp, #108	; 0x6c
 8003c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c16:	bf00      	nop
 8003c18:	ffff0208 	.word	0xffff0208

08003c1c <vsiprintf>:
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	4601      	mov	r1, r0
 8003c22:	4802      	ldr	r0, [pc, #8]	; (8003c2c <vsiprintf+0x10>)
 8003c24:	6800      	ldr	r0, [r0, #0]
 8003c26:	f7ff bfe3 	b.w	8003bf0 <_vsiprintf_r>
 8003c2a:	bf00      	nop
 8003c2c:	20000058 	.word	0x20000058

08003c30 <memset>:
 8003c30:	4402      	add	r2, r0
 8003c32:	4603      	mov	r3, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <strcat>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4602      	mov	r2, r0
 8003c44:	7814      	ldrb	r4, [r2, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	3201      	adds	r2, #1
 8003c4a:	2c00      	cmp	r4, #0
 8003c4c:	d1fa      	bne.n	8003c44 <strcat+0x4>
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c58:	2a00      	cmp	r2, #0
 8003c5a:	d1f9      	bne.n	8003c50 <strcat+0x10>
 8003c5c:	bd10      	pop	{r4, pc}
	...

08003c60 <__errno>:
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <__errno+0x8>)
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000058 	.word	0x20000058

08003c6c <__libc_init_array>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ca4 <__libc_init_array+0x38>)
 8003c70:	4c0d      	ldr	r4, [pc, #52]	; (8003ca8 <__libc_init_array+0x3c>)
 8003c72:	1b64      	subs	r4, r4, r5
 8003c74:	10a4      	asrs	r4, r4, #2
 8003c76:	2600      	movs	r6, #0
 8003c78:	42a6      	cmp	r6, r4
 8003c7a:	d109      	bne.n	8003c90 <__libc_init_array+0x24>
 8003c7c:	4d0b      	ldr	r5, [pc, #44]	; (8003cac <__libc_init_array+0x40>)
 8003c7e:	4c0c      	ldr	r4, [pc, #48]	; (8003cb0 <__libc_init_array+0x44>)
 8003c80:	f000 fc72 	bl	8004568 <_init>
 8003c84:	1b64      	subs	r4, r4, r5
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	2600      	movs	r6, #0
 8003c8a:	42a6      	cmp	r6, r4
 8003c8c:	d105      	bne.n	8003c9a <__libc_init_array+0x2e>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c94:	4798      	blx	r3
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7ee      	b.n	8003c78 <__libc_init_array+0xc>
 8003c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9e:	4798      	blx	r3
 8003ca0:	3601      	adds	r6, #1
 8003ca2:	e7f2      	b.n	8003c8a <__libc_init_array+0x1e>
 8003ca4:	08004630 	.word	0x08004630
 8003ca8:	08004630 	.word	0x08004630
 8003cac:	08004630 	.word	0x08004630
 8003cb0:	08004634 	.word	0x08004634

08003cb4 <__retarget_lock_acquire_recursive>:
 8003cb4:	4770      	bx	lr

08003cb6 <__retarget_lock_release_recursive>:
 8003cb6:	4770      	bx	lr

08003cb8 <strcpy>:
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cbe:	f803 2b01 	strb.w	r2, [r3], #1
 8003cc2:	2a00      	cmp	r2, #0
 8003cc4:	d1f9      	bne.n	8003cba <strcpy+0x2>
 8003cc6:	4770      	bx	lr

08003cc8 <_free_r>:
 8003cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	d044      	beq.n	8003d58 <_free_r+0x90>
 8003cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd2:	9001      	str	r0, [sp, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cda:	bfb8      	it	lt
 8003cdc:	18e4      	addlt	r4, r4, r3
 8003cde:	f000 f8df 	bl	8003ea0 <__malloc_lock>
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <_free_r+0x94>)
 8003ce4:	9801      	ldr	r0, [sp, #4]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	b933      	cbnz	r3, 8003cf8 <_free_r+0x30>
 8003cea:	6063      	str	r3, [r4, #4]
 8003cec:	6014      	str	r4, [r2, #0]
 8003cee:	b003      	add	sp, #12
 8003cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cf4:	f000 b8da 	b.w	8003eac <__malloc_unlock>
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d908      	bls.n	8003d0e <_free_r+0x46>
 8003cfc:	6825      	ldr	r5, [r4, #0]
 8003cfe:	1961      	adds	r1, r4, r5
 8003d00:	428b      	cmp	r3, r1
 8003d02:	bf01      	itttt	eq
 8003d04:	6819      	ldreq	r1, [r3, #0]
 8003d06:	685b      	ldreq	r3, [r3, #4]
 8003d08:	1949      	addeq	r1, r1, r5
 8003d0a:	6021      	streq	r1, [r4, #0]
 8003d0c:	e7ed      	b.n	8003cea <_free_r+0x22>
 8003d0e:	461a      	mov	r2, r3
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b10b      	cbz	r3, 8003d18 <_free_r+0x50>
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	d9fa      	bls.n	8003d0e <_free_r+0x46>
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	1855      	adds	r5, r2, r1
 8003d1c:	42a5      	cmp	r5, r4
 8003d1e:	d10b      	bne.n	8003d38 <_free_r+0x70>
 8003d20:	6824      	ldr	r4, [r4, #0]
 8003d22:	4421      	add	r1, r4
 8003d24:	1854      	adds	r4, r2, r1
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	d1e0      	bne.n	8003cee <_free_r+0x26>
 8003d2c:	681c      	ldr	r4, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	6053      	str	r3, [r2, #4]
 8003d32:	440c      	add	r4, r1
 8003d34:	6014      	str	r4, [r2, #0]
 8003d36:	e7da      	b.n	8003cee <_free_r+0x26>
 8003d38:	d902      	bls.n	8003d40 <_free_r+0x78>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	6003      	str	r3, [r0, #0]
 8003d3e:	e7d6      	b.n	8003cee <_free_r+0x26>
 8003d40:	6825      	ldr	r5, [r4, #0]
 8003d42:	1961      	adds	r1, r4, r5
 8003d44:	428b      	cmp	r3, r1
 8003d46:	bf04      	itt	eq
 8003d48:	6819      	ldreq	r1, [r3, #0]
 8003d4a:	685b      	ldreq	r3, [r3, #4]
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	bf04      	itt	eq
 8003d50:	1949      	addeq	r1, r1, r5
 8003d52:	6021      	streq	r1, [r4, #0]
 8003d54:	6054      	str	r4, [r2, #4]
 8003d56:	e7ca      	b.n	8003cee <_free_r+0x26>
 8003d58:	b003      	add	sp, #12
 8003d5a:	bd30      	pop	{r4, r5, pc}
 8003d5c:	200003d4 	.word	0x200003d4

08003d60 <sbrk_aligned>:
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4e0e      	ldr	r6, [pc, #56]	; (8003d9c <sbrk_aligned+0x3c>)
 8003d64:	460c      	mov	r4, r1
 8003d66:	6831      	ldr	r1, [r6, #0]
 8003d68:	4605      	mov	r5, r0
 8003d6a:	b911      	cbnz	r1, 8003d72 <sbrk_aligned+0x12>
 8003d6c:	f000 fba6 	bl	80044bc <_sbrk_r>
 8003d70:	6030      	str	r0, [r6, #0]
 8003d72:	4621      	mov	r1, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 fba1 	bl	80044bc <_sbrk_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d00a      	beq.n	8003d94 <sbrk_aligned+0x34>
 8003d7e:	1cc4      	adds	r4, r0, #3
 8003d80:	f024 0403 	bic.w	r4, r4, #3
 8003d84:	42a0      	cmp	r0, r4
 8003d86:	d007      	beq.n	8003d98 <sbrk_aligned+0x38>
 8003d88:	1a21      	subs	r1, r4, r0
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 fb96 	bl	80044bc <_sbrk_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d101      	bne.n	8003d98 <sbrk_aligned+0x38>
 8003d94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d98:	4620      	mov	r0, r4
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	200003d8 	.word	0x200003d8

08003da0 <_malloc_r>:
 8003da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	1ccd      	adds	r5, r1, #3
 8003da6:	f025 0503 	bic.w	r5, r5, #3
 8003daa:	3508      	adds	r5, #8
 8003dac:	2d0c      	cmp	r5, #12
 8003dae:	bf38      	it	cc
 8003db0:	250c      	movcc	r5, #12
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	4607      	mov	r7, r0
 8003db6:	db01      	blt.n	8003dbc <_malloc_r+0x1c>
 8003db8:	42a9      	cmp	r1, r5
 8003dba:	d905      	bls.n	8003dc8 <_malloc_r+0x28>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	2600      	movs	r6, #0
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e9c <_malloc_r+0xfc>
 8003dcc:	f000 f868 	bl	8003ea0 <__malloc_lock>
 8003dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	bb5c      	cbnz	r4, 8003e30 <_malloc_r+0x90>
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f7ff ffc0 	bl	8003d60 <sbrk_aligned>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	4604      	mov	r4, r0
 8003de4:	d155      	bne.n	8003e92 <_malloc_r+0xf2>
 8003de6:	f8d8 4000 	ldr.w	r4, [r8]
 8003dea:	4626      	mov	r6, r4
 8003dec:	2e00      	cmp	r6, #0
 8003dee:	d145      	bne.n	8003e7c <_malloc_r+0xdc>
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d048      	beq.n	8003e86 <_malloc_r+0xe6>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	4631      	mov	r1, r6
 8003df8:	4638      	mov	r0, r7
 8003dfa:	eb04 0903 	add.w	r9, r4, r3
 8003dfe:	f000 fb5d 	bl	80044bc <_sbrk_r>
 8003e02:	4581      	cmp	r9, r0
 8003e04:	d13f      	bne.n	8003e86 <_malloc_r+0xe6>
 8003e06:	6821      	ldr	r1, [r4, #0]
 8003e08:	1a6d      	subs	r5, r5, r1
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f7ff ffa7 	bl	8003d60 <sbrk_aligned>
 8003e12:	3001      	adds	r0, #1
 8003e14:	d037      	beq.n	8003e86 <_malloc_r+0xe6>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	442b      	add	r3, r5
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d038      	beq.n	8003e96 <_malloc_r+0xf6>
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	42a2      	cmp	r2, r4
 8003e28:	d12b      	bne.n	8003e82 <_malloc_r+0xe2>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	e00f      	b.n	8003e50 <_malloc_r+0xb0>
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	1b52      	subs	r2, r2, r5
 8003e34:	d41f      	bmi.n	8003e76 <_malloc_r+0xd6>
 8003e36:	2a0b      	cmp	r2, #11
 8003e38:	d917      	bls.n	8003e6a <_malloc_r+0xca>
 8003e3a:	1961      	adds	r1, r4, r5
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	6025      	str	r5, [r4, #0]
 8003e40:	bf18      	it	ne
 8003e42:	6059      	strne	r1, [r3, #4]
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	bf08      	it	eq
 8003e48:	f8c8 1000 	streq.w	r1, [r8]
 8003e4c:	5162      	str	r2, [r4, r5]
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	4638      	mov	r0, r7
 8003e52:	f104 060b 	add.w	r6, r4, #11
 8003e56:	f000 f829 	bl	8003eac <__malloc_unlock>
 8003e5a:	f026 0607 	bic.w	r6, r6, #7
 8003e5e:	1d23      	adds	r3, r4, #4
 8003e60:	1af2      	subs	r2, r6, r3
 8003e62:	d0ae      	beq.n	8003dc2 <_malloc_r+0x22>
 8003e64:	1b9b      	subs	r3, r3, r6
 8003e66:	50a3      	str	r3, [r4, r2]
 8003e68:	e7ab      	b.n	8003dc2 <_malloc_r+0x22>
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	6862      	ldr	r2, [r4, #4]
 8003e6e:	d1dd      	bne.n	8003e2c <_malloc_r+0x8c>
 8003e70:	f8c8 2000 	str.w	r2, [r8]
 8003e74:	e7ec      	b.n	8003e50 <_malloc_r+0xb0>
 8003e76:	4623      	mov	r3, r4
 8003e78:	6864      	ldr	r4, [r4, #4]
 8003e7a:	e7ac      	b.n	8003dd6 <_malloc_r+0x36>
 8003e7c:	4634      	mov	r4, r6
 8003e7e:	6876      	ldr	r6, [r6, #4]
 8003e80:	e7b4      	b.n	8003dec <_malloc_r+0x4c>
 8003e82:	4613      	mov	r3, r2
 8003e84:	e7cc      	b.n	8003e20 <_malloc_r+0x80>
 8003e86:	230c      	movs	r3, #12
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f000 f80e 	bl	8003eac <__malloc_unlock>
 8003e90:	e797      	b.n	8003dc2 <_malloc_r+0x22>
 8003e92:	6025      	str	r5, [r4, #0]
 8003e94:	e7dc      	b.n	8003e50 <_malloc_r+0xb0>
 8003e96:	605b      	str	r3, [r3, #4]
 8003e98:	deff      	udf	#255	; 0xff
 8003e9a:	bf00      	nop
 8003e9c:	200003d4 	.word	0x200003d4

08003ea0 <__malloc_lock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_lock+0x8>)
 8003ea2:	f7ff bf07 	b.w	8003cb4 <__retarget_lock_acquire_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	200003d0 	.word	0x200003d0

08003eac <__malloc_unlock>:
 8003eac:	4801      	ldr	r0, [pc, #4]	; (8003eb4 <__malloc_unlock+0x8>)
 8003eae:	f7ff bf02 	b.w	8003cb6 <__retarget_lock_release_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	200003d0 	.word	0x200003d0

08003eb8 <__ssputs_r>:
 8003eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	688e      	ldr	r6, [r1, #8]
 8003ebe:	461f      	mov	r7, r3
 8003ec0:	42be      	cmp	r6, r7
 8003ec2:	680b      	ldr	r3, [r1, #0]
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4690      	mov	r8, r2
 8003eca:	d82c      	bhi.n	8003f26 <__ssputs_r+0x6e>
 8003ecc:	898a      	ldrh	r2, [r1, #12]
 8003ece:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ed2:	d026      	beq.n	8003f22 <__ssputs_r+0x6a>
 8003ed4:	6965      	ldr	r5, [r4, #20]
 8003ed6:	6909      	ldr	r1, [r1, #16]
 8003ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003edc:	eba3 0901 	sub.w	r9, r3, r1
 8003ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ee4:	1c7b      	adds	r3, r7, #1
 8003ee6:	444b      	add	r3, r9
 8003ee8:	106d      	asrs	r5, r5, #1
 8003eea:	429d      	cmp	r5, r3
 8003eec:	bf38      	it	cc
 8003eee:	461d      	movcc	r5, r3
 8003ef0:	0553      	lsls	r3, r2, #21
 8003ef2:	d527      	bpl.n	8003f44 <__ssputs_r+0x8c>
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7ff ff53 	bl	8003da0 <_malloc_r>
 8003efa:	4606      	mov	r6, r0
 8003efc:	b360      	cbz	r0, 8003f58 <__ssputs_r+0xa0>
 8003efe:	6921      	ldr	r1, [r4, #16]
 8003f00:	464a      	mov	r2, r9
 8003f02:	f000 faeb 	bl	80044dc <memcpy>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	6126      	str	r6, [r4, #16]
 8003f14:	6165      	str	r5, [r4, #20]
 8003f16:	444e      	add	r6, r9
 8003f18:	eba5 0509 	sub.w	r5, r5, r9
 8003f1c:	6026      	str	r6, [r4, #0]
 8003f1e:	60a5      	str	r5, [r4, #8]
 8003f20:	463e      	mov	r6, r7
 8003f22:	42be      	cmp	r6, r7
 8003f24:	d900      	bls.n	8003f28 <__ssputs_r+0x70>
 8003f26:	463e      	mov	r6, r7
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	f000 faab 	bl	8004488 <memmove>
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	1b9b      	subs	r3, r3, r6
 8003f36:	60a3      	str	r3, [r4, #8]
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	4433      	add	r3, r6
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	462a      	mov	r2, r5
 8003f46:	f000 fad7 	bl	80044f8 <_realloc_r>
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1e0      	bne.n	8003f12 <__ssputs_r+0x5a>
 8003f50:	6921      	ldr	r1, [r4, #16]
 8003f52:	4650      	mov	r0, sl
 8003f54:	f7ff feb8 	bl	8003cc8 <_free_r>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	f8ca 3000 	str.w	r3, [sl]
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f6a:	e7e9      	b.n	8003f40 <__ssputs_r+0x88>

08003f6c <_svfiprintf_r>:
 8003f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	4698      	mov	r8, r3
 8003f72:	898b      	ldrh	r3, [r1, #12]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	b09d      	sub	sp, #116	; 0x74
 8003f78:	4607      	mov	r7, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	d50e      	bpl.n	8003f9e <_svfiprintf_r+0x32>
 8003f80:	690b      	ldr	r3, [r1, #16]
 8003f82:	b963      	cbnz	r3, 8003f9e <_svfiprintf_r+0x32>
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	f7ff ff0b 	bl	8003da0 <_malloc_r>
 8003f8a:	6028      	str	r0, [r5, #0]
 8003f8c:	6128      	str	r0, [r5, #16]
 8003f8e:	b920      	cbnz	r0, 8003f9a <_svfiprintf_r+0x2e>
 8003f90:	230c      	movs	r3, #12
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f98:	e0d0      	b.n	800413c <_svfiprintf_r+0x1d0>
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	616b      	str	r3, [r5, #20]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fac:	2330      	movs	r3, #48	; 0x30
 8003fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004154 <_svfiprintf_r+0x1e8>
 8003fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fb6:	f04f 0901 	mov.w	r9, #1
 8003fba:	4623      	mov	r3, r4
 8003fbc:	469a      	mov	sl, r3
 8003fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fc2:	b10a      	cbz	r2, 8003fc8 <_svfiprintf_r+0x5c>
 8003fc4:	2a25      	cmp	r2, #37	; 0x25
 8003fc6:	d1f9      	bne.n	8003fbc <_svfiprintf_r+0x50>
 8003fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fcc:	d00b      	beq.n	8003fe6 <_svfiprintf_r+0x7a>
 8003fce:	465b      	mov	r3, fp
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f7ff ff6f 	bl	8003eb8 <__ssputs_r>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f000 80a9 	beq.w	8004132 <_svfiprintf_r+0x1c6>
 8003fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fe2:	445a      	add	r2, fp
 8003fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a1 	beq.w	8004132 <_svfiprintf_r+0x1c6>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ffa:	f10a 0a01 	add.w	sl, sl, #1
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	9307      	str	r3, [sp, #28]
 8004002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004006:	931a      	str	r3, [sp, #104]	; 0x68
 8004008:	4654      	mov	r4, sl
 800400a:	2205      	movs	r2, #5
 800400c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004010:	4850      	ldr	r0, [pc, #320]	; (8004154 <_svfiprintf_r+0x1e8>)
 8004012:	f7fc f8e5 	bl	80001e0 <memchr>
 8004016:	9a04      	ldr	r2, [sp, #16]
 8004018:	b9d8      	cbnz	r0, 8004052 <_svfiprintf_r+0xe6>
 800401a:	06d0      	lsls	r0, r2, #27
 800401c:	bf44      	itt	mi
 800401e:	2320      	movmi	r3, #32
 8004020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004024:	0711      	lsls	r1, r2, #28
 8004026:	bf44      	itt	mi
 8004028:	232b      	movmi	r3, #43	; 0x2b
 800402a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800402e:	f89a 3000 	ldrb.w	r3, [sl]
 8004032:	2b2a      	cmp	r3, #42	; 0x2a
 8004034:	d015      	beq.n	8004062 <_svfiprintf_r+0xf6>
 8004036:	9a07      	ldr	r2, [sp, #28]
 8004038:	4654      	mov	r4, sl
 800403a:	2000      	movs	r0, #0
 800403c:	f04f 0c0a 	mov.w	ip, #10
 8004040:	4621      	mov	r1, r4
 8004042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004046:	3b30      	subs	r3, #48	; 0x30
 8004048:	2b09      	cmp	r3, #9
 800404a:	d94d      	bls.n	80040e8 <_svfiprintf_r+0x17c>
 800404c:	b1b0      	cbz	r0, 800407c <_svfiprintf_r+0x110>
 800404e:	9207      	str	r2, [sp, #28]
 8004050:	e014      	b.n	800407c <_svfiprintf_r+0x110>
 8004052:	eba0 0308 	sub.w	r3, r0, r8
 8004056:	fa09 f303 	lsl.w	r3, r9, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	9304      	str	r3, [sp, #16]
 800405e:	46a2      	mov	sl, r4
 8004060:	e7d2      	b.n	8004008 <_svfiprintf_r+0x9c>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	1d19      	adds	r1, r3, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	9103      	str	r1, [sp, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	bfbb      	ittet	lt
 800406e:	425b      	neglt	r3, r3
 8004070:	f042 0202 	orrlt.w	r2, r2, #2
 8004074:	9307      	strge	r3, [sp, #28]
 8004076:	9307      	strlt	r3, [sp, #28]
 8004078:	bfb8      	it	lt
 800407a:	9204      	strlt	r2, [sp, #16]
 800407c:	7823      	ldrb	r3, [r4, #0]
 800407e:	2b2e      	cmp	r3, #46	; 0x2e
 8004080:	d10c      	bne.n	800409c <_svfiprintf_r+0x130>
 8004082:	7863      	ldrb	r3, [r4, #1]
 8004084:	2b2a      	cmp	r3, #42	; 0x2a
 8004086:	d134      	bne.n	80040f2 <_svfiprintf_r+0x186>
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	9203      	str	r2, [sp, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	bfb8      	it	lt
 8004094:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004098:	3402      	adds	r4, #2
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004164 <_svfiprintf_r+0x1f8>
 80040a0:	7821      	ldrb	r1, [r4, #0]
 80040a2:	2203      	movs	r2, #3
 80040a4:	4650      	mov	r0, sl
 80040a6:	f7fc f89b 	bl	80001e0 <memchr>
 80040aa:	b138      	cbz	r0, 80040bc <_svfiprintf_r+0x150>
 80040ac:	9b04      	ldr	r3, [sp, #16]
 80040ae:	eba0 000a 	sub.w	r0, r0, sl
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	4082      	lsls	r2, r0
 80040b6:	4313      	orrs	r3, r2
 80040b8:	3401      	adds	r4, #1
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c0:	4825      	ldr	r0, [pc, #148]	; (8004158 <_svfiprintf_r+0x1ec>)
 80040c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040c6:	2206      	movs	r2, #6
 80040c8:	f7fc f88a 	bl	80001e0 <memchr>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d038      	beq.n	8004142 <_svfiprintf_r+0x1d6>
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <_svfiprintf_r+0x1f0>)
 80040d2:	bb1b      	cbnz	r3, 800411c <_svfiprintf_r+0x1b0>
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	3307      	adds	r3, #7
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	3308      	adds	r3, #8
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e2:	4433      	add	r3, r6
 80040e4:	9309      	str	r3, [sp, #36]	; 0x24
 80040e6:	e768      	b.n	8003fba <_svfiprintf_r+0x4e>
 80040e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ec:	460c      	mov	r4, r1
 80040ee:	2001      	movs	r0, #1
 80040f0:	e7a6      	b.n	8004040 <_svfiprintf_r+0xd4>
 80040f2:	2300      	movs	r3, #0
 80040f4:	3401      	adds	r4, #1
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	4619      	mov	r1, r3
 80040fa:	f04f 0c0a 	mov.w	ip, #10
 80040fe:	4620      	mov	r0, r4
 8004100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004104:	3a30      	subs	r2, #48	; 0x30
 8004106:	2a09      	cmp	r2, #9
 8004108:	d903      	bls.n	8004112 <_svfiprintf_r+0x1a6>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0c6      	beq.n	800409c <_svfiprintf_r+0x130>
 800410e:	9105      	str	r1, [sp, #20]
 8004110:	e7c4      	b.n	800409c <_svfiprintf_r+0x130>
 8004112:	fb0c 2101 	mla	r1, ip, r1, r2
 8004116:	4604      	mov	r4, r0
 8004118:	2301      	movs	r3, #1
 800411a:	e7f0      	b.n	80040fe <_svfiprintf_r+0x192>
 800411c:	ab03      	add	r3, sp, #12
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	462a      	mov	r2, r5
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <_svfiprintf_r+0x1f4>)
 8004124:	a904      	add	r1, sp, #16
 8004126:	4638      	mov	r0, r7
 8004128:	f3af 8000 	nop.w
 800412c:	1c42      	adds	r2, r0, #1
 800412e:	4606      	mov	r6, r0
 8004130:	d1d6      	bne.n	80040e0 <_svfiprintf_r+0x174>
 8004132:	89ab      	ldrh	r3, [r5, #12]
 8004134:	065b      	lsls	r3, r3, #25
 8004136:	f53f af2d 	bmi.w	8003f94 <_svfiprintf_r+0x28>
 800413a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800413c:	b01d      	add	sp, #116	; 0x74
 800413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004142:	ab03      	add	r3, sp, #12
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	462a      	mov	r2, r5
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <_svfiprintf_r+0x1f4>)
 800414a:	a904      	add	r1, sp, #16
 800414c:	4638      	mov	r0, r7
 800414e:	f000 f879 	bl	8004244 <_printf_i>
 8004152:	e7eb      	b.n	800412c <_svfiprintf_r+0x1c0>
 8004154:	080045f4 	.word	0x080045f4
 8004158:	080045fe 	.word	0x080045fe
 800415c:	00000000 	.word	0x00000000
 8004160:	08003eb9 	.word	0x08003eb9
 8004164:	080045fa 	.word	0x080045fa

08004168 <_printf_common>:
 8004168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	4616      	mov	r6, r2
 800416e:	4699      	mov	r9, r3
 8004170:	688a      	ldr	r2, [r1, #8]
 8004172:	690b      	ldr	r3, [r1, #16]
 8004174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004178:	4293      	cmp	r3, r2
 800417a:	bfb8      	it	lt
 800417c:	4613      	movlt	r3, r2
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004184:	4607      	mov	r7, r0
 8004186:	460c      	mov	r4, r1
 8004188:	b10a      	cbz	r2, 800418e <_printf_common+0x26>
 800418a:	3301      	adds	r3, #1
 800418c:	6033      	str	r3, [r6, #0]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	0699      	lsls	r1, r3, #26
 8004192:	bf42      	ittt	mi
 8004194:	6833      	ldrmi	r3, [r6, #0]
 8004196:	3302      	addmi	r3, #2
 8004198:	6033      	strmi	r3, [r6, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d106      	bne.n	80041b0 <_printf_common+0x48>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	6832      	ldr	r2, [r6, #0]
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	42ab      	cmp	r3, r5
 80041ae:	dc26      	bgt.n	80041fe <_printf_common+0x96>
 80041b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b4:	1e13      	subs	r3, r2, #0
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	bf18      	it	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	0692      	lsls	r2, r2, #26
 80041be:	d42b      	bmi.n	8004218 <_printf_common+0xb0>
 80041c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c4:	4649      	mov	r1, r9
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d01e      	beq.n	800420c <_printf_common+0xa4>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	6922      	ldr	r2, [r4, #16]
 80041d2:	f003 0306 	and.w	r3, r3, #6
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf02      	ittt	eq
 80041da:	68e5      	ldreq	r5, [r4, #12]
 80041dc:	6833      	ldreq	r3, [r6, #0]
 80041de:	1aed      	subeq	r5, r5, r3
 80041e0:	68a3      	ldr	r3, [r4, #8]
 80041e2:	bf0c      	ite	eq
 80041e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e8:	2500      	movne	r5, #0
 80041ea:	4293      	cmp	r3, r2
 80041ec:	bfc4      	itt	gt
 80041ee:	1a9b      	subgt	r3, r3, r2
 80041f0:	18ed      	addgt	r5, r5, r3
 80041f2:	2600      	movs	r6, #0
 80041f4:	341a      	adds	r4, #26
 80041f6:	42b5      	cmp	r5, r6
 80041f8:	d11a      	bne.n	8004230 <_printf_common+0xc8>
 80041fa:	2000      	movs	r0, #0
 80041fc:	e008      	b.n	8004210 <_printf_common+0xa8>
 80041fe:	2301      	movs	r3, #1
 8004200:	4652      	mov	r2, sl
 8004202:	4649      	mov	r1, r9
 8004204:	4638      	mov	r0, r7
 8004206:	47c0      	blx	r8
 8004208:	3001      	adds	r0, #1
 800420a:	d103      	bne.n	8004214 <_printf_common+0xac>
 800420c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	3501      	adds	r5, #1
 8004216:	e7c6      	b.n	80041a6 <_printf_common+0x3e>
 8004218:	18e1      	adds	r1, r4, r3
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	2030      	movs	r0, #48	; 0x30
 800421e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004222:	4422      	add	r2, r4
 8004224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800422c:	3302      	adds	r3, #2
 800422e:	e7c7      	b.n	80041c0 <_printf_common+0x58>
 8004230:	2301      	movs	r3, #1
 8004232:	4622      	mov	r2, r4
 8004234:	4649      	mov	r1, r9
 8004236:	4638      	mov	r0, r7
 8004238:	47c0      	blx	r8
 800423a:	3001      	adds	r0, #1
 800423c:	d0e6      	beq.n	800420c <_printf_common+0xa4>
 800423e:	3601      	adds	r6, #1
 8004240:	e7d9      	b.n	80041f6 <_printf_common+0x8e>
	...

08004244 <_printf_i>:
 8004244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	7e0f      	ldrb	r7, [r1, #24]
 800424a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800424c:	2f78      	cmp	r7, #120	; 0x78
 800424e:	4691      	mov	r9, r2
 8004250:	4680      	mov	r8, r0
 8004252:	460c      	mov	r4, r1
 8004254:	469a      	mov	sl, r3
 8004256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800425a:	d807      	bhi.n	800426c <_printf_i+0x28>
 800425c:	2f62      	cmp	r7, #98	; 0x62
 800425e:	d80a      	bhi.n	8004276 <_printf_i+0x32>
 8004260:	2f00      	cmp	r7, #0
 8004262:	f000 80d4 	beq.w	800440e <_printf_i+0x1ca>
 8004266:	2f58      	cmp	r7, #88	; 0x58
 8004268:	f000 80c0 	beq.w	80043ec <_printf_i+0x1a8>
 800426c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004274:	e03a      	b.n	80042ec <_printf_i+0xa8>
 8004276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800427a:	2b15      	cmp	r3, #21
 800427c:	d8f6      	bhi.n	800426c <_printf_i+0x28>
 800427e:	a101      	add	r1, pc, #4	; (adr r1, 8004284 <_printf_i+0x40>)
 8004280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042f1 	.word	0x080042f1
 800428c:	0800426d 	.word	0x0800426d
 8004290:	0800426d 	.word	0x0800426d
 8004294:	0800426d 	.word	0x0800426d
 8004298:	0800426d 	.word	0x0800426d
 800429c:	080042f1 	.word	0x080042f1
 80042a0:	0800426d 	.word	0x0800426d
 80042a4:	0800426d 	.word	0x0800426d
 80042a8:	0800426d 	.word	0x0800426d
 80042ac:	0800426d 	.word	0x0800426d
 80042b0:	080043f5 	.word	0x080043f5
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	080043af 	.word	0x080043af
 80042bc:	0800426d 	.word	0x0800426d
 80042c0:	0800426d 	.word	0x0800426d
 80042c4:	08004417 	.word	0x08004417
 80042c8:	0800426d 	.word	0x0800426d
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	0800426d 	.word	0x0800426d
 80042d4:	0800426d 	.word	0x0800426d
 80042d8:	080043b7 	.word	0x080043b7
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	602a      	str	r2, [r5, #0]
 80042e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ec:	2301      	movs	r3, #1
 80042ee:	e09f      	b.n	8004430 <_printf_i+0x1ec>
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	0607      	lsls	r7, r0, #24
 80042f6:	f103 0104 	add.w	r1, r3, #4
 80042fa:	6029      	str	r1, [r5, #0]
 80042fc:	d501      	bpl.n	8004302 <_printf_i+0xbe>
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	e003      	b.n	800430a <_printf_i+0xc6>
 8004302:	0646      	lsls	r6, r0, #25
 8004304:	d5fb      	bpl.n	80042fe <_printf_i+0xba>
 8004306:	f9b3 6000 	ldrsh.w	r6, [r3]
 800430a:	2e00      	cmp	r6, #0
 800430c:	da03      	bge.n	8004316 <_printf_i+0xd2>
 800430e:	232d      	movs	r3, #45	; 0x2d
 8004310:	4276      	negs	r6, r6
 8004312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004316:	485a      	ldr	r0, [pc, #360]	; (8004480 <_printf_i+0x23c>)
 8004318:	230a      	movs	r3, #10
 800431a:	e012      	b.n	8004342 <_printf_i+0xfe>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	1d19      	adds	r1, r3, #4
 8004322:	6029      	str	r1, [r5, #0]
 8004324:	0605      	lsls	r5, r0, #24
 8004326:	d501      	bpl.n	800432c <_printf_i+0xe8>
 8004328:	681e      	ldr	r6, [r3, #0]
 800432a:	e002      	b.n	8004332 <_printf_i+0xee>
 800432c:	0641      	lsls	r1, r0, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0xe4>
 8004330:	881e      	ldrh	r6, [r3, #0]
 8004332:	4853      	ldr	r0, [pc, #332]	; (8004480 <_printf_i+0x23c>)
 8004334:	2f6f      	cmp	r7, #111	; 0x6f
 8004336:	bf0c      	ite	eq
 8004338:	2308      	moveq	r3, #8
 800433a:	230a      	movne	r3, #10
 800433c:	2100      	movs	r1, #0
 800433e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004342:	6865      	ldr	r5, [r4, #4]
 8004344:	60a5      	str	r5, [r4, #8]
 8004346:	2d00      	cmp	r5, #0
 8004348:	bfa2      	ittt	ge
 800434a:	6821      	ldrge	r1, [r4, #0]
 800434c:	f021 0104 	bicge.w	r1, r1, #4
 8004350:	6021      	strge	r1, [r4, #0]
 8004352:	b90e      	cbnz	r6, 8004358 <_printf_i+0x114>
 8004354:	2d00      	cmp	r5, #0
 8004356:	d04b      	beq.n	80043f0 <_printf_i+0x1ac>
 8004358:	4615      	mov	r5, r2
 800435a:	fbb6 f1f3 	udiv	r1, r6, r3
 800435e:	fb03 6711 	mls	r7, r3, r1, r6
 8004362:	5dc7      	ldrb	r7, [r0, r7]
 8004364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004368:	4637      	mov	r7, r6
 800436a:	42bb      	cmp	r3, r7
 800436c:	460e      	mov	r6, r1
 800436e:	d9f4      	bls.n	800435a <_printf_i+0x116>
 8004370:	2b08      	cmp	r3, #8
 8004372:	d10b      	bne.n	800438c <_printf_i+0x148>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	07de      	lsls	r6, r3, #31
 8004378:	d508      	bpl.n	800438c <_printf_i+0x148>
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6861      	ldr	r1, [r4, #4]
 800437e:	4299      	cmp	r1, r3
 8004380:	bfde      	ittt	le
 8004382:	2330      	movle	r3, #48	; 0x30
 8004384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800438c:	1b52      	subs	r2, r2, r5
 800438e:	6122      	str	r2, [r4, #16]
 8004390:	f8cd a000 	str.w	sl, [sp]
 8004394:	464b      	mov	r3, r9
 8004396:	aa03      	add	r2, sp, #12
 8004398:	4621      	mov	r1, r4
 800439a:	4640      	mov	r0, r8
 800439c:	f7ff fee4 	bl	8004168 <_printf_common>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d14a      	bne.n	800443a <_printf_i+0x1f6>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a8:	b004      	add	sp, #16
 80043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f043 0320 	orr.w	r3, r3, #32
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	4833      	ldr	r0, [pc, #204]	; (8004484 <_printf_i+0x240>)
 80043b8:	2778      	movs	r7, #120	; 0x78
 80043ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	6829      	ldr	r1, [r5, #0]
 80043c2:	061f      	lsls	r7, r3, #24
 80043c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80043c8:	d402      	bmi.n	80043d0 <_printf_i+0x18c>
 80043ca:	065f      	lsls	r7, r3, #25
 80043cc:	bf48      	it	mi
 80043ce:	b2b6      	uxthmi	r6, r6
 80043d0:	07df      	lsls	r7, r3, #31
 80043d2:	bf48      	it	mi
 80043d4:	f043 0320 	orrmi.w	r3, r3, #32
 80043d8:	6029      	str	r1, [r5, #0]
 80043da:	bf48      	it	mi
 80043dc:	6023      	strmi	r3, [r4, #0]
 80043de:	b91e      	cbnz	r6, 80043e8 <_printf_i+0x1a4>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	f023 0320 	bic.w	r3, r3, #32
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	2310      	movs	r3, #16
 80043ea:	e7a7      	b.n	800433c <_printf_i+0xf8>
 80043ec:	4824      	ldr	r0, [pc, #144]	; (8004480 <_printf_i+0x23c>)
 80043ee:	e7e4      	b.n	80043ba <_printf_i+0x176>
 80043f0:	4615      	mov	r5, r2
 80043f2:	e7bd      	b.n	8004370 <_printf_i+0x12c>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	6826      	ldr	r6, [r4, #0]
 80043f8:	6961      	ldr	r1, [r4, #20]
 80043fa:	1d18      	adds	r0, r3, #4
 80043fc:	6028      	str	r0, [r5, #0]
 80043fe:	0635      	lsls	r5, r6, #24
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	d501      	bpl.n	8004408 <_printf_i+0x1c4>
 8004404:	6019      	str	r1, [r3, #0]
 8004406:	e002      	b.n	800440e <_printf_i+0x1ca>
 8004408:	0670      	lsls	r0, r6, #25
 800440a:	d5fb      	bpl.n	8004404 <_printf_i+0x1c0>
 800440c:	8019      	strh	r1, [r3, #0]
 800440e:	2300      	movs	r3, #0
 8004410:	6123      	str	r3, [r4, #16]
 8004412:	4615      	mov	r5, r2
 8004414:	e7bc      	b.n	8004390 <_printf_i+0x14c>
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	1d1a      	adds	r2, r3, #4
 800441a:	602a      	str	r2, [r5, #0]
 800441c:	681d      	ldr	r5, [r3, #0]
 800441e:	6862      	ldr	r2, [r4, #4]
 8004420:	2100      	movs	r1, #0
 8004422:	4628      	mov	r0, r5
 8004424:	f7fb fedc 	bl	80001e0 <memchr>
 8004428:	b108      	cbz	r0, 800442e <_printf_i+0x1ea>
 800442a:	1b40      	subs	r0, r0, r5
 800442c:	6060      	str	r0, [r4, #4]
 800442e:	6863      	ldr	r3, [r4, #4]
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	2300      	movs	r3, #0
 8004434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004438:	e7aa      	b.n	8004390 <_printf_i+0x14c>
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	462a      	mov	r2, r5
 800443e:	4649      	mov	r1, r9
 8004440:	4640      	mov	r0, r8
 8004442:	47d0      	blx	sl
 8004444:	3001      	adds	r0, #1
 8004446:	d0ad      	beq.n	80043a4 <_printf_i+0x160>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	079b      	lsls	r3, r3, #30
 800444c:	d413      	bmi.n	8004476 <_printf_i+0x232>
 800444e:	68e0      	ldr	r0, [r4, #12]
 8004450:	9b03      	ldr	r3, [sp, #12]
 8004452:	4298      	cmp	r0, r3
 8004454:	bfb8      	it	lt
 8004456:	4618      	movlt	r0, r3
 8004458:	e7a6      	b.n	80043a8 <_printf_i+0x164>
 800445a:	2301      	movs	r3, #1
 800445c:	4632      	mov	r2, r6
 800445e:	4649      	mov	r1, r9
 8004460:	4640      	mov	r0, r8
 8004462:	47d0      	blx	sl
 8004464:	3001      	adds	r0, #1
 8004466:	d09d      	beq.n	80043a4 <_printf_i+0x160>
 8004468:	3501      	adds	r5, #1
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	9903      	ldr	r1, [sp, #12]
 800446e:	1a5b      	subs	r3, r3, r1
 8004470:	42ab      	cmp	r3, r5
 8004472:	dcf2      	bgt.n	800445a <_printf_i+0x216>
 8004474:	e7eb      	b.n	800444e <_printf_i+0x20a>
 8004476:	2500      	movs	r5, #0
 8004478:	f104 0619 	add.w	r6, r4, #25
 800447c:	e7f5      	b.n	800446a <_printf_i+0x226>
 800447e:	bf00      	nop
 8004480:	08004605 	.word	0x08004605
 8004484:	08004616 	.word	0x08004616

08004488 <memmove>:
 8004488:	4288      	cmp	r0, r1
 800448a:	b510      	push	{r4, lr}
 800448c:	eb01 0402 	add.w	r4, r1, r2
 8004490:	d902      	bls.n	8004498 <memmove+0x10>
 8004492:	4284      	cmp	r4, r0
 8004494:	4623      	mov	r3, r4
 8004496:	d807      	bhi.n	80044a8 <memmove+0x20>
 8004498:	1e43      	subs	r3, r0, #1
 800449a:	42a1      	cmp	r1, r4
 800449c:	d008      	beq.n	80044b0 <memmove+0x28>
 800449e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044a6:	e7f8      	b.n	800449a <memmove+0x12>
 80044a8:	4402      	add	r2, r0
 80044aa:	4601      	mov	r1, r0
 80044ac:	428a      	cmp	r2, r1
 80044ae:	d100      	bne.n	80044b2 <memmove+0x2a>
 80044b0:	bd10      	pop	{r4, pc}
 80044b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ba:	e7f7      	b.n	80044ac <memmove+0x24>

080044bc <_sbrk_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d06      	ldr	r5, [pc, #24]	; (80044d8 <_sbrk_r+0x1c>)
 80044c0:	2300      	movs	r3, #0
 80044c2:	4604      	mov	r4, r0
 80044c4:	4608      	mov	r0, r1
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	f7fc fe14 	bl	80010f4 <_sbrk>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_sbrk_r+0x1a>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_sbrk_r+0x1a>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	200003cc 	.word	0x200003cc

080044dc <memcpy>:
 80044dc:	440a      	add	r2, r1
 80044de:	4291      	cmp	r1, r2
 80044e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044e4:	d100      	bne.n	80044e8 <memcpy+0xc>
 80044e6:	4770      	bx	lr
 80044e8:	b510      	push	{r4, lr}
 80044ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f2:	4291      	cmp	r1, r2
 80044f4:	d1f9      	bne.n	80044ea <memcpy+0xe>
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <_realloc_r>:
 80044f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044fc:	4680      	mov	r8, r0
 80044fe:	4614      	mov	r4, r2
 8004500:	460e      	mov	r6, r1
 8004502:	b921      	cbnz	r1, 800450e <_realloc_r+0x16>
 8004504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004508:	4611      	mov	r1, r2
 800450a:	f7ff bc49 	b.w	8003da0 <_malloc_r>
 800450e:	b92a      	cbnz	r2, 800451c <_realloc_r+0x24>
 8004510:	f7ff fbda 	bl	8003cc8 <_free_r>
 8004514:	4625      	mov	r5, r4
 8004516:	4628      	mov	r0, r5
 8004518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800451c:	f000 f81b 	bl	8004556 <_malloc_usable_size_r>
 8004520:	4284      	cmp	r4, r0
 8004522:	4607      	mov	r7, r0
 8004524:	d802      	bhi.n	800452c <_realloc_r+0x34>
 8004526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800452a:	d812      	bhi.n	8004552 <_realloc_r+0x5a>
 800452c:	4621      	mov	r1, r4
 800452e:	4640      	mov	r0, r8
 8004530:	f7ff fc36 	bl	8003da0 <_malloc_r>
 8004534:	4605      	mov	r5, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d0ed      	beq.n	8004516 <_realloc_r+0x1e>
 800453a:	42bc      	cmp	r4, r7
 800453c:	4622      	mov	r2, r4
 800453e:	4631      	mov	r1, r6
 8004540:	bf28      	it	cs
 8004542:	463a      	movcs	r2, r7
 8004544:	f7ff ffca 	bl	80044dc <memcpy>
 8004548:	4631      	mov	r1, r6
 800454a:	4640      	mov	r0, r8
 800454c:	f7ff fbbc 	bl	8003cc8 <_free_r>
 8004550:	e7e1      	b.n	8004516 <_realloc_r+0x1e>
 8004552:	4635      	mov	r5, r6
 8004554:	e7df      	b.n	8004516 <_realloc_r+0x1e>

08004556 <_malloc_usable_size_r>:
 8004556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455a:	1f18      	subs	r0, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	bfbc      	itt	lt
 8004560:	580b      	ldrlt	r3, [r1, r0]
 8004562:	18c0      	addlt	r0, r0, r3
 8004564:	4770      	bx	lr
	...

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
